{"componentChunkName":"component---src-templates-docs-js","path":"/Unit-III/8-string/1-stringoperations","result":{"data":{"site":{"siteMetadata":{"title":"GE8151 - Problem Solving with Python Programming","docsLocation":"https://github.com/madhusona/GE8151/tree/master/content"}},"mdx":{"fields":{"id":"6e6aa18f-d978-593a-945a-e04a62535454","title":"String Operations","slug":"/Unit-III/8-string/1-stringoperations"},"body":"function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsx mdx */\nvar _frontmatter = {\n  \"title\": \"String Operations\",\n  \"metaTitle\": \"Python - String Operations\",\n  \"metaDescription\": \"Python - String Operations\"\n};\n\nvar makeShortcode = function makeShortcode(name) {\n  return function MDXDefaultShortcode(props) {\n    console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\");\n    return mdx(\"div\", props);\n  };\n};\n\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, [\"components\"]);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"p\", null, \"A string is a sequence, which means it is an ordered collection of other values. Strings are immutable.\"), mdx(\"h2\", null, \"Creation:\"), mdx(\"p\", null, \"Strings are created by enclosing characters in quotes. Python treats single quotes the same as double quotes. Creating strings is as simple as assigning a value to a variable\\nExample:\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {}), \"fruit = 'banana'\\n\")), mdx(\"h2\", null, \"Indexing string:\"), mdx(\"p\", null, \"Each item in a string corresponds to an index number, which is an integer value, starting with the index number 0.\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Any integer expression can be used as an index.\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"If you try to read or write an element that does not exist, you get an IndexError.\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"If an index has a negative value, it counts backward from the end of the list.\")), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {}), \"fruit='banana'\\n\")), mdx(\"h2\", null, \"Accessing Items in String:\"), mdx(\"p\", null, \"A string is a sequence of characters. You can access the characters one at a time with the\\nbracket operator.\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {}), \">>> fruit = 'banana'\\n>>> letter = fruit[1]\\n\")), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"The second statement selects character number 1 from fruit and assigns it to letter .\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"The expression in brackets is called an index. The index indicates which character in the\\nsequence you want \")), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {}), \">>> letter\\n'a' \\n\")), mdx(\"p\", null, \"So b is the 0th letter (\\u201Czero-eth\\u201D) of 'banana' , a is the 1th letter (\\u201Cone-eth\\u201D), and n is the 2th letter (\\u201Ctwo-eth\\u201D).\"), mdx(\"p\", null, \"As an index you can use an expression that contains variables and operators:\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {}), \">>> i = 1\\n>>> fruit[i]\\n'a'\\n>>> fruit[i+1]\\n'n'\\n\")), mdx(\"h2\", null, \"Modifying Items in String:\"), mdx(\"p\", null, \"Strings are immutable, you can\\u2019t modify the elements. But you can replace one string with another\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {}), \"s='west'\\ns='ea'+s[2:]\\n\")), mdx(\"h2\", null, \"Modifying string with Operators:\"), mdx(\"p\", null, \"The + operator concatenates lists.\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {}), \">>> s='east'\\n>>> s2='west'\\n>>> c=s+s2\\n>>> c\\neastwest\\n\")), mdx(\"p\", null, \"The * operator repeats a list a given number of times.\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {}), \">>> print(c*2)\\neastwesteastwest\\n\")), mdx(\"p\", null, \"##Deletion:\\nRemoving individual character is not possible. It's possible to delete entire string by using del statement.\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {}), \">>> s='east'\\n>>> del s\\n\")), mdx(\"p\", null, \"##Traversal:\\nprocessing a string one character at a time. Often they start at the beginning, select each character in turn, do something to it, and continue until the end. This pattern of processing is called a traversal.\"), mdx(\"p\", null, \"Function that takes a string as an argument and displays the letters  one per line.\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {}), \"index = 0\\nwhile index < len(fruit):\\n    letter = fruit[index]\\n    print(letter)\\n    index = index + 1\\n\")), mdx(\"p\", null, \"OR\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {}), \"for i in fruit:\\n    print(i)\\n\")), mdx(\"p\", null, \"Function that takes a string as an argument and displays the letters  backwards one per line.\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {}), \"index = len(fruit) - 1\\nwhile index >= 0:\\n    letter = fruit[index]\\n    print(letter)\\n    index = index - 1\\n\")), mdx(\"h2\", null, \"len\"), mdx(\"p\", null, \"len is a built-in function that returns the number of characters in a string:\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {}), \">>> fruit = 'banana'\\n>>> len(fruit)\\n6\\n\")));\n}\n;\nMDXContent.isMDXComponent = true;","tableOfContents":{"items":[{"url":"#creation","title":"Creation:"},{"url":"#indexing-string","title":"Indexing string:"},{"url":"#accessing-items-in-string","title":"Accessing Items in String:"},{"url":"#modifying-items-in-string","title":"Modifying Items in String:"},{"url":"#modifying-string-with-operators","title":"Modifying string with Operators:"},{"url":"#len","title":"len"}]},"parent":{"relativePath":"Unit-III/8-string/1-stringoperations.md"},"frontmatter":{"metaTitle":"Python - String Operations","metaDescription":"Python - String Operations"}},"allMdx":{"edges":[{"node":{"fields":{"slug":"/","title":"Syllabus"}}},{"node":{"fields":{"slug":"/Unit-I","title":"Unit-I"}}},{"node":{"fields":{"slug":"/Unit-II","title":"Unit - II"}}},{"node":{"fields":{"slug":"/Unit-IV","title":"Unit - IV"}}},{"node":{"fields":{"slug":"/Unit-V","title":"Unit - V"}}},{"node":{"fields":{"slug":"/Unit-I/1-algorithm","title":"Algorithms"}}},{"node":{"fields":{"slug":"/Unit-I/2-building","title":"Building Blocks of Algorithm"}}},{"node":{"fields":{"slug":"/Unit-I/3-functions","title":"Functions"}}},{"node":{"fields":{"slug":"/Unit-I/4-pseudocode","title":"Pseudocode"}}},{"node":{"fields":{"slug":"/Unit-I/5-Flowchart","title":"Flowchart"}}},{"node":{"fields":{"slug":"/Unit-I/6-aps","title":"Algorithmic Problem Solving"}}},{"node":{"fields":{"slug":"/Unit-I/7-illustrativeproblems","title":"Illustrative Problems"}}},{"node":{"fields":{"slug":"/Unit-II/1-Introduction","title":"Introduction to Python"}}},{"node":{"fields":{"slug":"/Unit-II/2-Installation","title":"Installation"}}},{"node":{"fields":{"slug":"/Unit-II/3-pythoninterpreter","title":"Interpreter"}}},{"node":{"fields":{"slug":"/Unit-II/4-values and types","title":"Values and Types"}}},{"node":{"fields":{"slug":"/Unit-II/5-variables","title":"Variables"}}},{"node":{"fields":{"slug":"/Unit-II/7-statement","title":"Statements"}}},{"node":{"fields":{"slug":"/Unit-II/6-Expression","title":"Expressions"}}},{"node":{"fields":{"slug":"/Unit-II/8-operators","title":"Operators"}}},{"node":{"fields":{"slug":"/Unit-II/9-precedence of operators","title":"Precedence of Operator"}}},{"node":{"fields":{"slug":"/Unit-II/comments","title":"Comments"}}},{"node":{"fields":{"slug":"/Unit-II/Illustrative programs","title":"Python Programs"}}},{"node":{"fields":{"slug":"/Unit-I/3-functions/1-function examples","title":"Function Examples"}}},{"node":{"fields":{"slug":"/Unit-I/2-building/1-Sequence Examples","title":"Sequence Examples"}}},{"node":{"fields":{"slug":"/Unit-I/2-building/2-Selection Example","title":"Selection Examples"}}},{"node":{"fields":{"slug":"/Unit-I/2-building/3-Iteration Example","title":"Iteration Examples"}}},{"node":{"fields":{"slug":"/Unit-I/4-pseudocode/examples","title":"Pseudocode examples"}}},{"node":{"fields":{"slug":"/Unit-I/7-illustrativeproblems/guess","title":"Guess a number"}}},{"node":{"fields":{"slug":"/Unit-II/8-operators/1-Arithmetic","title":"Arithmetic Operator"}}},{"node":{"fields":{"slug":"/Unit-II/8-operators/2-Comparison","title":"Comparison Operator"}}},{"node":{"fields":{"slug":"/Unit-II/8-operators/3-Logical","title":"Logical Operator"}}},{"node":{"fields":{"slug":"/Unit-II/8-operators/4-Bitwise","title":"Bitwise Operator"}}},{"node":{"fields":{"slug":"/Unit-II/8-operators/5-Assignment","title":"Assignment Operator"}}},{"node":{"fields":{"slug":"/Unit-II/8-operators/6-Membership","title":"Memebership Operator"}}},{"node":{"fields":{"slug":"/Unit-II/8-operators/7-identity","title":"Identity Operator"}}},{"node":{"fields":{"slug":"/Unit-III","title":"Unit - III"}}},{"node":{"fields":{"slug":"/Unit-III/1-BooleanExpression","title":"Boolean expressions"}}},{"node":{"fields":{"slug":"/Unit-III/2-if","title":"Conditional execution"}}},{"node":{"fields":{"slug":"/Unit-III/2-if/3-if-else","title":"alternative (if-else)"}}},{"node":{"fields":{"slug":"/Unit-III/2-if/5-nested","title":"Nested conditionals"}}},{"node":{"fields":{"slug":"/Unit-III/2-if/4-if-elif-else","title":"Chained Conditionals (if elif else)"}}},{"node":{"fields":{"slug":"/Unit-III/3-iterative","title":"Itreation"}}},{"node":{"fields":{"slug":"/Unit-III/3-iterative/1-while","title":"While"}}},{"node":{"fields":{"slug":"/Unit-III/3-iterative/2-for","title":"for"}}},{"node":{"fields":{"slug":"/Unit-III/3-iterative/3-range","title":"Range function"}}},{"node":{"fields":{"slug":"/Unit-III/3-iterative/4-break","title":"Break"}}},{"node":{"fields":{"slug":"/Unit-III/3-iterative/5-continue","title":"Continue"}}},{"node":{"fields":{"slug":"/Unit-III/3-iterative/6-pass","title":"Pass"}}},{"node":{"fields":{"slug":"/Unit-III/4-fruitfulfunctions","title":"Fruitful Function"}}},{"node":{"fields":{"slug":"/Unit-III/4-fruitfulfunctions/1-parameters","title":"Parameters (Formal parameter) and Arguments (Actual parameter)"}}},{"node":{"fields":{"slug":"/Unit-III/4-fruitfulfunctions/2-Function Arguments","title":"Function Arguments"}}},{"node":{"fields":{"slug":"/Unit-III/6-Composition","title":"Composition"}}},{"node":{"fields":{"slug":"/Unit-III/5-Scope of Variables","title":"Scope of  Variables"}}},{"node":{"fields":{"slug":"/Unit-III/7-recursion","title":"Recursion"}}},{"node":{"fields":{"slug":"/Unit-III/8-string","title":"String"}}},{"node":{"fields":{"slug":"/Unit-III/8-string/1-stringoperations","title":"String Operations"}}},{"node":{"fields":{"slug":"/Unit-III/8-string/2-stringslice","title":"String slices"}}},{"node":{"fields":{"slug":"/Unit-III/8-string/3-immutablestrings","title":"Immutable String"}}},{"node":{"fields":{"slug":"/Unit-III/8-string/4-stringmethods","title":"String Methods"}}},{"node":{"fields":{"slug":"/Unit-III/9-Programs","title":"Programs"}}},{"node":{"fields":{"slug":"/Unit-III/9-Programs/1-squareroot","title":"Square Root Program"}}},{"node":{"fields":{"slug":"/Unit-III/9-Programs/2-gcd","title":"GCD"}}},{"node":{"fields":{"slug":"/Unit-III/9-Programs/3-Exponentiation","title":"Exponentiation"}}},{"node":{"fields":{"slug":"/Unit-III/9-Programs/4-sumofarray","title":"sum of array"}}},{"node":{"fields":{"slug":"/Unit-III/9-Programs/5-linearsearch","title":"Linear Search"}}},{"node":{"fields":{"slug":"/Unit-III/9-Programs/6-binarysearch","title":"Binary Search"}}}]}},"pageContext":{"isCreatedByStatefulCreatePages":false,"id":"6e6aa18f-d978-593a-945a-e04a62535454"}}}