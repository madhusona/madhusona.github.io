{"componentChunkName":"component---src-templates-docs-js","path":"/Unit-III/3-iterative/3-range","result":{"data":{"site":{"siteMetadata":{"title":"GE8151 - Problem Solving with Python Programming","docsLocation":"https://github.com/madhusona/GE8151/tree/master/content"}},"mdx":{"fields":{"id":"c5b6e135-dce9-5510-b797-bce6fadd8c92","title":"Range function","slug":"/Unit-III/3-iterative/3-range"},"body":"function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsx mdx */\nvar _frontmatter = {\n  \"title\": \"Range function\",\n  \"metaTitle\": \"Python - range function\",\n  \"metaDescription\": \"Python - range function\"\n};\n\nvar makeShortcode = function makeShortcode(name) {\n  return function MDXDefaultShortcode(props) {\n    console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\");\n    return mdx(\"div\", props);\n  };\n};\n\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, [\"components\"]);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"p\", null, \"The built-in function range() is used to iterate over a sequence of numbers.When working with range(), you can pass between 1 and 3 integer arguments to it:\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"start states the integer value at which the sequence begins, if this is not included then start begins at 0\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"stop is always required and is the integer that is counted up to but not included\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"step sets how much to increase (or decrease in the case of negative numbers) the next iteration, if this is omitted then step defaults to 1.\")), mdx(\"h2\", null, \"range(stop):\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {}), \"for i in range(6):\\n   print(i)\\n\")), mdx(\"p\", null, \"In the program above, the stop argument is 6, so the code will iterate from 0-6 (exclusive of 6)\"), mdx(\"p\", null, \"Output:\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {}), \"0\\n1\\n2\\n3\\n4\\n5\\n\")), mdx(\"h2\", null, \"range(start, stop)\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {}), \"for i in range(20,25):\\n   print(i)\\n\")), mdx(\"p\", null, \"Here, the range goes from 20 (inclusive) to 25 (exclusive), so the output looks like this:\"), mdx(\"p\", null, \"Output\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {}), \"20\\n21\\n22\\n23\\n24\\n\")), mdx(\"h2\", null, \"range(start, stop, step): step with a positive value:\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {}), \"for i in range(0,15,3):\\n   print(i)\\n\")), mdx(\"p\", null, \"In this case, the for loop is set up so that the numbers from 0 to 15 print out, but at a step of 3, so that only every third number is printed, like so:\"), mdx(\"p\", null, \"Output\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {}), \"0\\n3\\n6\\n9\\n12\\n\")), mdx(\"h2\", null, \"range(start, stop, step): step with a negative value:\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {}), \"for i in range(100,50,-10):\\n   print(i)\\n\")), mdx(\"p\", null, \"Output\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {}), \"100\\n90\\n80\\n70\\n60\\n\")));\n}\n;\nMDXContent.isMDXComponent = true;","tableOfContents":{"items":[{"url":"#rangestop","title":"range(stop):"},{"url":"#rangestart-stop","title":"range(start, stop)"},{"url":"#rangestart-stop-step-step-with-a-positive-value","title":"range(start, stop, step): step with a positive value:"},{"url":"#rangestart-stop-step-step-with-a-negative-value","title":"range(start, stop, step): step with a negative value:"}]},"parent":{"relativePath":"Unit-III/3-iterative/3-range.md"},"frontmatter":{"metaTitle":"Python - range function","metaDescription":"Python - range function"}},"allMdx":{"edges":[{"node":{"fields":{"slug":"/","title":"Syllabus"}}},{"node":{"fields":{"slug":"/Unit-I","title":"Unit-I"}}},{"node":{"fields":{"slug":"/Unit-II","title":"Unit - II"}}},{"node":{"fields":{"slug":"/Unit-IV","title":"Unit - IV"}}},{"node":{"fields":{"slug":"/Unit-V","title":"Unit - V"}}},{"node":{"fields":{"slug":"/Unit-I/1-algorithm","title":"Algorithms"}}},{"node":{"fields":{"slug":"/Unit-I/2-building","title":"Building Blocks of Algorithm"}}},{"node":{"fields":{"slug":"/Unit-I/3-functions","title":"Functions"}}},{"node":{"fields":{"slug":"/Unit-I/4-pseudocode","title":"Pseudocode"}}},{"node":{"fields":{"slug":"/Unit-I/5-Flowchart","title":"Flowchart"}}},{"node":{"fields":{"slug":"/Unit-I/6-aps","title":"Algorithmic Problem Solving"}}},{"node":{"fields":{"slug":"/Unit-I/7-illustrativeproblems","title":"Illustrative Problems"}}},{"node":{"fields":{"slug":"/Unit-II/1-Introduction","title":"Introduction to Python"}}},{"node":{"fields":{"slug":"/Unit-II/2-Installation","title":"Installation"}}},{"node":{"fields":{"slug":"/Unit-II/3-pythoninterpreter","title":"Interpreter"}}},{"node":{"fields":{"slug":"/Unit-II/4-values and types","title":"Values and Types"}}},{"node":{"fields":{"slug":"/Unit-II/5-variables","title":"Variables"}}},{"node":{"fields":{"slug":"/Unit-II/7-statement","title":"Statements"}}},{"node":{"fields":{"slug":"/Unit-II/6-Expression","title":"Expressions"}}},{"node":{"fields":{"slug":"/Unit-II/8-operators","title":"Operators"}}},{"node":{"fields":{"slug":"/Unit-II/9-precedence of operators","title":"Precedence of Operator"}}},{"node":{"fields":{"slug":"/Unit-II/comments","title":"Comments"}}},{"node":{"fields":{"slug":"/Unit-II/Illustrative programs","title":"Python Programs"}}},{"node":{"fields":{"slug":"/Unit-I/3-functions/1-function examples","title":"Function Examples"}}},{"node":{"fields":{"slug":"/Unit-I/2-building/1-Sequence Examples","title":"Sequence Examples"}}},{"node":{"fields":{"slug":"/Unit-I/2-building/2-Selection Example","title":"Selection Examples"}}},{"node":{"fields":{"slug":"/Unit-I/2-building/3-Iteration Example","title":"Iteration Examples"}}},{"node":{"fields":{"slug":"/Unit-I/4-pseudocode/examples","title":"Pseudocode examples"}}},{"node":{"fields":{"slug":"/Unit-I/7-illustrativeproblems/guess","title":"Guess a number"}}},{"node":{"fields":{"slug":"/Unit-II/8-operators/1-Arithmetic","title":"Arithmetic Operator"}}},{"node":{"fields":{"slug":"/Unit-II/8-operators/2-Comparison","title":"Comparison Operator"}}},{"node":{"fields":{"slug":"/Unit-II/8-operators/3-Logical","title":"Logical Operator"}}},{"node":{"fields":{"slug":"/Unit-II/8-operators/4-Bitwise","title":"Bitwise Operator"}}},{"node":{"fields":{"slug":"/Unit-II/8-operators/5-Assignment","title":"Assignment Operator"}}},{"node":{"fields":{"slug":"/Unit-II/8-operators/6-Membership","title":"Memebership Operator"}}},{"node":{"fields":{"slug":"/Unit-II/8-operators/7-identity","title":"Identity Operator"}}},{"node":{"fields":{"slug":"/Unit-III","title":"Unit - III"}}},{"node":{"fields":{"slug":"/Unit-III/1-BooleanExpression","title":"Boolean expressions"}}},{"node":{"fields":{"slug":"/Unit-III/2-if","title":"Conditional execution"}}},{"node":{"fields":{"slug":"/Unit-III/2-if/3-if-else","title":"alternative (if-else)"}}},{"node":{"fields":{"slug":"/Unit-III/2-if/5-nested","title":"Nested conditionals"}}},{"node":{"fields":{"slug":"/Unit-III/2-if/4-if-elif-else","title":"Chained Conditionals (if elif else)"}}},{"node":{"fields":{"slug":"/Unit-III/3-iterative","title":"Itreation"}}},{"node":{"fields":{"slug":"/Unit-III/3-iterative/1-while","title":"While"}}},{"node":{"fields":{"slug":"/Unit-III/3-iterative/2-for","title":"for"}}},{"node":{"fields":{"slug":"/Unit-III/3-iterative/3-range","title":"Range function"}}},{"node":{"fields":{"slug":"/Unit-III/3-iterative/4-break","title":"Break"}}},{"node":{"fields":{"slug":"/Unit-III/3-iterative/5-continue","title":"Continue"}}},{"node":{"fields":{"slug":"/Unit-III/3-iterative/6-pass","title":"Pass"}}},{"node":{"fields":{"slug":"/Unit-III/4-fruitfulfunctions","title":"Fruitful Function"}}},{"node":{"fields":{"slug":"/Unit-III/4-fruitfulfunctions/1-parameters","title":"Parameters (Formal parameter) and Arguments (Actual parameter)"}}},{"node":{"fields":{"slug":"/Unit-III/4-fruitfulfunctions/2-Function Arguments","title":"Function Arguments"}}},{"node":{"fields":{"slug":"/Unit-III/6-Composition","title":"Composition"}}},{"node":{"fields":{"slug":"/Unit-III/5-Scope of Variables","title":"Scope of  Variables"}}},{"node":{"fields":{"slug":"/Unit-III/7-recursion","title":"Recursion"}}},{"node":{"fields":{"slug":"/Unit-III/8-string","title":"String"}}},{"node":{"fields":{"slug":"/Unit-III/8-string/1-stringoperations","title":"String Operations"}}},{"node":{"fields":{"slug":"/Unit-III/8-string/2-stringslice","title":"String slices"}}},{"node":{"fields":{"slug":"/Unit-III/8-string/3-immutablestrings","title":"Immutable String"}}},{"node":{"fields":{"slug":"/Unit-III/8-string/4-stringmethods","title":"String Methods"}}},{"node":{"fields":{"slug":"/Unit-III/9-Programs","title":"Programs"}}},{"node":{"fields":{"slug":"/Unit-III/9-Programs/1-squareroot","title":"Square Root Program"}}},{"node":{"fields":{"slug":"/Unit-III/9-Programs/2-gcd","title":"GCD"}}},{"node":{"fields":{"slug":"/Unit-III/9-Programs/3-Exponentiation","title":"Exponentiation"}}},{"node":{"fields":{"slug":"/Unit-III/9-Programs/4-sumofarray","title":"sum of array"}}},{"node":{"fields":{"slug":"/Unit-III/9-Programs/5-linearsearch","title":"Linear Search"}}},{"node":{"fields":{"slug":"/Unit-III/9-Programs/6-binarysearch","title":"Binary Search"}}}]}},"pageContext":{"isCreatedByStatefulCreatePages":false,"id":"c5b6e135-dce9-5510-b797-bce6fadd8c92"}}}