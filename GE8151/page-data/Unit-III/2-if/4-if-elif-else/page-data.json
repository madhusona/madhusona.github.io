{"componentChunkName":"component---src-templates-docs-js","path":"/Unit-III/2-if/4-if-elif-else","result":{"data":{"site":{"siteMetadata":{"title":"GE8151 - Problem Solving with Python Programming","docsLocation":"https://github.com/madhusona/GE8151/tree/master/content"}},"mdx":{"fields":{"id":"0b9b60a5-1b7d-586f-83dc-46a271d18f07","title":"Chained Conditionals (if elif else)","slug":"/Unit-III/2-if/4-if-elif-else"},"body":"function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsx mdx */\nvar _frontmatter = {\n  \"title\": \"Chained Conditionals (if elif else)\",\n  \"metaTitle\": \"Python - Chained Conditionals (if elif else) \",\n  \"metaDescription\": \"Python - Chained Conditionals (if elif else)\"\n};\n\nvar makeShortcode = function makeShortcode(name) {\n  return function MDXDefaultShortcode(props) {\n    console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\");\n    return mdx(\"div\", props);\n  };\n};\n\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, [\"components\"]);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"p\", null, \"Chained Conditional can be used when we need more than two branches.\"), mdx(\"h2\", null, \"Syntax\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {}), \"if boolean expression:\\n    statement 1\\n    statement 2\\n    \\u2026\\n    statement n\\nelif boolean expression:\\n    statement 1\\n    ..\\n    statement n \\nelse:\\n    statement 1\\n    statement n\\n\\n\")), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"p\", {\n    parentName: \"li\"\n  }, \"There is no limit on the number of elif statements. If there is an else clause, it has to be at the end, but there doesn\\u2019t have to be one.\")), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"p\", {\n    parentName: \"li\"\n  }, \"Each condition is checked in order. If the first is false, the next is checked, and so on. If one of them is true, the corresponding branch runs and the statement ends. Even if more than one condition is true, only the first true branch runs.\"))), mdx(\"h2\", null, \"Example\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {}), \"x=int(input())\\ny=int(input())\\nif x < y:\\n    print('x is less than y')\\nelif x > y:\\n    print('x is greater than y')\\nelse:\\n    print('x and y are equal')\\n\\nInput:\\n5\\n10\\n\\nOutput:\\nx is less than y\\n\\n\")));\n}\n;\nMDXContent.isMDXComponent = true;","tableOfContents":{"items":[{"url":"#syntax","title":"Syntax"},{"url":"#example","title":"Example"}]},"parent":{"relativePath":"Unit-III/2-if/4-if-elif-else.md"},"frontmatter":{"metaTitle":"Python - Chained Conditionals (if elif else) ","metaDescription":"Python - Chained Conditionals (if elif else)"}},"allMdx":{"edges":[{"node":{"fields":{"slug":"/","title":"Syllabus"}}},{"node":{"fields":{"slug":"/Unit-I","title":"Unit-I"}}},{"node":{"fields":{"slug":"/Unit-II","title":"Unit - II"}}},{"node":{"fields":{"slug":"/Unit-IV","title":"Unit - IV"}}},{"node":{"fields":{"slug":"/Unit-V","title":"Unit - V"}}},{"node":{"fields":{"slug":"/Unit-I/1-algorithm","title":"Algorithms"}}},{"node":{"fields":{"slug":"/Unit-I/2-building","title":"Building Blocks of Algorithm"}}},{"node":{"fields":{"slug":"/Unit-I/3-functions","title":"Functions"}}},{"node":{"fields":{"slug":"/Unit-I/4-pseudocode","title":"Pseudocode"}}},{"node":{"fields":{"slug":"/Unit-I/5-Flowchart","title":"Flowchart"}}},{"node":{"fields":{"slug":"/Unit-I/6-aps","title":"Algorithmic Problem Solving"}}},{"node":{"fields":{"slug":"/Unit-I/7-illustrativeproblems","title":"Illustrative Problems"}}},{"node":{"fields":{"slug":"/Unit-II/1-Introduction","title":"Introduction to Python"}}},{"node":{"fields":{"slug":"/Unit-II/2-Installation","title":"Installation"}}},{"node":{"fields":{"slug":"/Unit-II/3-pythoninterpreter","title":"Interpreter"}}},{"node":{"fields":{"slug":"/Unit-II/4-values and types","title":"Values and Types"}}},{"node":{"fields":{"slug":"/Unit-II/5-variables","title":"Variables"}}},{"node":{"fields":{"slug":"/Unit-II/7-statement","title":"Statements"}}},{"node":{"fields":{"slug":"/Unit-II/6-Expression","title":"Expressions"}}},{"node":{"fields":{"slug":"/Unit-II/8-operators","title":"Operators"}}},{"node":{"fields":{"slug":"/Unit-II/9-precedence of operators","title":"Precedence of Operator"}}},{"node":{"fields":{"slug":"/Unit-II/comments","title":"Comments"}}},{"node":{"fields":{"slug":"/Unit-II/Illustrative programs","title":"Python Programs"}}},{"node":{"fields":{"slug":"/Unit-I/3-functions/1-function examples","title":"Function Examples"}}},{"node":{"fields":{"slug":"/Unit-I/2-building/1-Sequence Examples","title":"Sequence Examples"}}},{"node":{"fields":{"slug":"/Unit-I/2-building/2-Selection Example","title":"Selection Examples"}}},{"node":{"fields":{"slug":"/Unit-I/2-building/3-Iteration Example","title":"Iteration Examples"}}},{"node":{"fields":{"slug":"/Unit-I/4-pseudocode/examples","title":"Pseudocode examples"}}},{"node":{"fields":{"slug":"/Unit-I/7-illustrativeproblems/guess","title":"Guess a number"}}},{"node":{"fields":{"slug":"/Unit-II/8-operators/1-Arithmetic","title":"Arithmetic Operator"}}},{"node":{"fields":{"slug":"/Unit-II/8-operators/2-Comparison","title":"Comparison Operator"}}},{"node":{"fields":{"slug":"/Unit-II/8-operators/3-Logical","title":"Logical Operator"}}},{"node":{"fields":{"slug":"/Unit-II/8-operators/4-Bitwise","title":"Bitwise Operator"}}},{"node":{"fields":{"slug":"/Unit-II/8-operators/5-Assignment","title":"Assignment Operator"}}},{"node":{"fields":{"slug":"/Unit-II/8-operators/6-Membership","title":"Memebership Operator"}}},{"node":{"fields":{"slug":"/Unit-II/8-operators/7-identity","title":"Identity Operator"}}},{"node":{"fields":{"slug":"/Unit-III","title":"Unit - III"}}},{"node":{"fields":{"slug":"/Unit-III/1-BooleanExpression","title":"Boolean expressions"}}},{"node":{"fields":{"slug":"/Unit-III/2-if","title":"Conditional execution"}}},{"node":{"fields":{"slug":"/Unit-III/2-if/3-if-else","title":"alternative (if-else)"}}},{"node":{"fields":{"slug":"/Unit-III/2-if/5-nested","title":"Nested conditionals"}}},{"node":{"fields":{"slug":"/Unit-III/2-if/4-if-elif-else","title":"Chained Conditionals (if elif else)"}}},{"node":{"fields":{"slug":"/Unit-III/3-iterative","title":"Itreation"}}},{"node":{"fields":{"slug":"/Unit-III/3-iterative/1-while","title":"While"}}},{"node":{"fields":{"slug":"/Unit-III/3-iterative/2-for","title":"for"}}},{"node":{"fields":{"slug":"/Unit-III/3-iterative/3-range","title":"Range function"}}},{"node":{"fields":{"slug":"/Unit-III/3-iterative/4-break","title":"Break"}}},{"node":{"fields":{"slug":"/Unit-III/3-iterative/5-continue","title":"Continue"}}},{"node":{"fields":{"slug":"/Unit-III/3-iterative/6-pass","title":"Pass"}}},{"node":{"fields":{"slug":"/Unit-III/4-fruitfulfunctions","title":"Fruitful Function"}}},{"node":{"fields":{"slug":"/Unit-III/4-fruitfulfunctions/1-parameters","title":"Parameters (Formal parameter) and Arguments (Actual parameter)"}}},{"node":{"fields":{"slug":"/Unit-III/4-fruitfulfunctions/2-Function Arguments","title":"Function Arguments"}}},{"node":{"fields":{"slug":"/Unit-III/6-Composition","title":"Composition"}}},{"node":{"fields":{"slug":"/Unit-III/5-Scope of Variables","title":"Scope of  Variables"}}},{"node":{"fields":{"slug":"/Unit-III/7-recursion","title":"Recursion"}}},{"node":{"fields":{"slug":"/Unit-III/8-string","title":"String"}}},{"node":{"fields":{"slug":"/Unit-III/8-string/1-stringoperations","title":"String Operations"}}},{"node":{"fields":{"slug":"/Unit-III/8-string/2-stringslice","title":"String slices"}}},{"node":{"fields":{"slug":"/Unit-III/8-string/3-immutablestrings","title":"Immutable String"}}},{"node":{"fields":{"slug":"/Unit-III/8-string/4-stringmethods","title":"String Methods"}}},{"node":{"fields":{"slug":"/Unit-III/9-Programs","title":"Programs"}}},{"node":{"fields":{"slug":"/Unit-III/9-Programs/1-squareroot","title":"Square Root Program"}}},{"node":{"fields":{"slug":"/Unit-III/9-Programs/2-gcd","title":"GCD"}}},{"node":{"fields":{"slug":"/Unit-III/9-Programs/3-Exponentiation","title":"Exponentiation"}}},{"node":{"fields":{"slug":"/Unit-III/9-Programs/4-sumofarray","title":"sum of array"}}},{"node":{"fields":{"slug":"/Unit-III/9-Programs/5-linearsearch","title":"Linear Search"}}},{"node":{"fields":{"slug":"/Unit-III/9-Programs/6-binarysearch","title":"Binary Search"}}}]}},"pageContext":{"isCreatedByStatefulCreatePages":false,"id":"0b9b60a5-1b7d-586f-83dc-46a271d18f07"}}}