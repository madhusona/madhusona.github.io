{"componentChunkName":"component---src-templates-docs-js","path":"/Unit-II/5-variables","result":{"data":{"site":{"siteMetadata":{"title":"GE8151 - Problem Solving with Python Programming","docsLocation":"https://github.com/madhusona/GE8151/tree/master/content"}},"mdx":{"fields":{"id":"14390705-75b3-5056-906d-d2fa1aceb818","title":"Variables","slug":"/Unit-II/5-variables"},"body":"function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsx mdx */\nvar _frontmatter = {\n  \"title\": \"Variables\",\n  \"metaTitle\": \"Python Variables\",\n  \"metaDescription\": \"Python Variables\"\n};\n\nvar makeShortcode = function makeShortcode(name) {\n  return function MDXDefaultShortcode(props) {\n    console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\");\n    return mdx(\"div\", props);\n  };\n};\n\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, [\"components\"]);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"h2\", null, \"Variables\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Variables are defined as reserved memory locations to store values. \"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Based on the data type of a variable, the interpreter allocates memory and decides what can be stored in the reserved memory. \"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Therefore, by assigning different data types to the variables, we can store integers, decimals or characters in these variables.\")), mdx(\"h2\", null, \"Rules for Naming Variables\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Variable names can contain letters,symbols like underscore ( __ ) and numbers, \"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"They begin with a letter not numbers.\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Both uppercase and lowercase letters are different\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Keywords cannot be used as variable names.\")), mdx(\"p\", null, mdx(\"strong\", {\n    parentName: \"p\"\n  }, \" Example for valid identifier \"), mdx(\"br\", null), \"\\nabc, xy12, good_start \", mdx(\"br\", null)), mdx(\"p\", null, mdx(\"strong\", {\n    parentName: \"p\"\n  }, \" Example for non-valid identifier \"), mdx(\"br\", null), \"\\n12xy, x$y\"), mdx(\"h2\", null, \"Assigning Values to Variables\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Python variables do not need explicit declaration to reserve memory space. \"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"The declaration happens automatically when we assign a value to a variable. \"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"The equal sign = is used to assign values to variables.\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"The operand to the left of the = operator is the name of the variable and the operand to the right of the = operator is the value stored in the variable. \")), mdx(\"p\", null, mdx(\"strong\", {\n    parentName: \"p\"\n  }, \" example: \")), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {}), \"counter=100# An integer assignment\\nmiles=1000.0# A floating point\\nname=\\\"John\\\"# A string\\n\")), mdx(\"h2\", null, \"Multiple Assignment\"), mdx(\"p\", null, \"Python allows us to assign a single value to several variables simultaneously.\\n\", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \" Example \")), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {}), \"a = b = c =1\\n\")), mdx(\"p\", null, \"Here, an integer object is created with the value 1, and all the three variables are assigned to the same memory location.\\nWe can also assign multiple objects to multiple variables.\\n\", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \" For example \")), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {}), \"    a, b, c =1,2,\\\"john\\\"\\n\")), mdx(\"p\", null, \"Here, two integer objects with values 1 and 2 are assigned to the variables a and b respectively, and one string object with the value \\\"john\\\" is assigned to the variable c.\"));\n}\n;\nMDXContent.isMDXComponent = true;","tableOfContents":{"items":[{"url":"#variables","title":"Variables"},{"url":"#rules-for-naming-variables","title":"Rules for Naming Variables"},{"url":"#assigning-values-to-variables","title":"Assigning Values to Variables"},{"url":"#multiple-assignment","title":"Multiple Assignment"}]},"parent":{"relativePath":"Unit-II/5-variables.md"},"frontmatter":{"metaTitle":"Python Variables","metaDescription":"Python Variables"}},"allMdx":{"edges":[{"node":{"fields":{"slug":"/","title":"Syllabus"}}},{"node":{"fields":{"slug":"/Unit-I","title":"Unit-I"}}},{"node":{"fields":{"slug":"/Unit-II","title":"Unit - II"}}},{"node":{"fields":{"slug":"/Unit-III","title":"Unit - III"}}},{"node":{"fields":{"slug":"/Unit-IV","title":"Unit - IV"}}},{"node":{"fields":{"slug":"/Unit-V","title":"Unit - V"}}},{"node":{"fields":{"slug":"/Unit-I/1-algorithm","title":"Algorithms"}}},{"node":{"fields":{"slug":"/Unit-I/2-building","title":"Building Blocks of Algorithm"}}},{"node":{"fields":{"slug":"/Unit-I/3-functions","title":"Functions"}}},{"node":{"fields":{"slug":"/Unit-I/4-pseudocode","title":"Pseudocode"}}},{"node":{"fields":{"slug":"/Unit-I/5-Flowchart","title":"Flowchart"}}},{"node":{"fields":{"slug":"/Unit-I/6-aps","title":"Algorithmic Problem Solving"}}},{"node":{"fields":{"slug":"/Unit-I/7-illustrativeproblems","title":"Illustrative Problems"}}},{"node":{"fields":{"slug":"/Unit-II/1-Introduction","title":"Introduction to Python"}}},{"node":{"fields":{"slug":"/Unit-II/2-Installation","title":"Installation"}}},{"node":{"fields":{"slug":"/Unit-II/3-pythoninterpreter","title":"Interpreter"}}},{"node":{"fields":{"slug":"/Unit-II/4-values and types","title":"Values and Types"}}},{"node":{"fields":{"slug":"/Unit-II/5-variables","title":"Variables"}}},{"node":{"fields":{"slug":"/Unit-II/6-Expression","title":"Expressions"}}},{"node":{"fields":{"slug":"/Unit-II/7-statement","title":"Statements"}}},{"node":{"fields":{"slug":"/Unit-II/8-operators","title":"Operators"}}},{"node":{"fields":{"slug":"/Unit-II/9-precedence of operators","title":"Precedence of Operator"}}},{"node":{"fields":{"slug":"/Unit-II/comments","title":"Comments"}}},{"node":{"fields":{"slug":"/Unit-II/Illustrative programs","title":"Python Programs"}}},{"node":{"fields":{"slug":"/Unit-I/2-building/1-Sequence Examples","title":"Sequence Examples"}}},{"node":{"fields":{"slug":"/Unit-I/2-building/2-Selection Example","title":"Selection Examples"}}},{"node":{"fields":{"slug":"/Unit-I/2-building/3-Iteration Example","title":"Iteration Examples"}}},{"node":{"fields":{"slug":"/Unit-I/3-functions/1-function examples","title":"Function Examples"}}},{"node":{"fields":{"slug":"/Unit-I/4-pseudocode/examples","title":"Pseudocode examples"}}},{"node":{"fields":{"slug":"/Unit-I/7-illustrativeproblems/guess","title":"Guess a number"}}},{"node":{"fields":{"slug":"/Unit-II/8-operators/2-Comparison","title":"Comparison Operator"}}},{"node":{"fields":{"slug":"/Unit-II/8-operators/1-Arithmetic","title":"Arithmetic Operator"}}},{"node":{"fields":{"slug":"/Unit-II/8-operators/3-Logical","title":"Logical Operator"}}},{"node":{"fields":{"slug":"/Unit-II/8-operators/4-Bitwise","title":"Bitwise Operator"}}},{"node":{"fields":{"slug":"/Unit-II/8-operators/5-Assignment","title":"Assignment Operator"}}},{"node":{"fields":{"slug":"/Unit-II/8-operators/6-Membership","title":"Memebership Operator"}}},{"node":{"fields":{"slug":"/Unit-II/8-operators/7-identity","title":"Identity Operator"}}}]}},"pageContext":{"isCreatedByStatefulCreatePages":false,"id":"14390705-75b3-5056-906d-d2fa1aceb818"}}}