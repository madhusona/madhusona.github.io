{"componentChunkName":"component---src-templates-docs-js","path":"/Unit-I/2-building/3-Iteration Example","result":{"data":{"site":{"siteMetadata":{"title":"GE8151 - Problem Solving with Python Programming","docsLocation":"https://github.com/madhusona/GE8151/tree/master/content"}},"mdx":{"fields":{"id":"eb78e8d5-c932-5ae9-84ff-469a754ca658","title":"Iteration Examples","slug":"/Unit-I/2-building/3-Iteration Example"},"body":"function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsx mdx */\nvar _frontmatter = {\n  \"title\": \"Iteration Examples\",\n  \"metaTitle\": \"Building Blocks of Algorithm - Iteration Examples\",\n  \"metaDescription\": \"Building Blocks of Algorithm - Iteration Examples\"\n};\n\nvar makeShortcode = function makeShortcode(name) {\n  return function MDXDefaultShortcode(props) {\n    console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\");\n    return mdx(\"div\", props);\n  };\n};\n\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, [\"components\"]);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"h2\", null, \"Print first N natural numbers\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {}), \"Step 1 : Start\\nStep 2 : Initialize the value of i as 1\\nStep 3: Read the value of a number, N\\nStep 4 : Check the condition i less than or equal to N, if the condition is true goto step 4.1 else goto step 5\\n         Step 4.1: Print i and increment the value of i by 1\\n         Step 4.2: Repeat the Step 4 until the condition is true\\nStep 5 : Stop\\n\")), mdx(\"h2\", null, \"Print Sum of first N natural numbers\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {}), \"Step 1 : Start\\nStep 2 : Initialize the value of i as 1 and sum as 0\\nStep 3: Read the value of a number, N\\nStep 4 : Check the condition i less than or equal to N, if the condition is true goto step 4.1 else goto step 5\\n         Step 4.1 calculate sum=sum+i \\n         Step 4.2: Increment the value of i by 1 and repeat the Step 4 until the condition is true\\nStep 5 : print sum\\nStep 6 : Stop\\n\")), mdx(\"h2\", null, \"Print odd numbers from 1 to N\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {}), \"Step 1: Start\\nStep 2: Initialize the value of i as 1\\nStep 3: Read the value of a number, N\\nStep 4: Check the condition i less than or equal to N, if the condition is true goto step 4.1 else \\n            goto step 5\\n    Step 4.1: print i and increment the value of i by 2\\n    Step 4.2: Repeat the Step 4 until the condition is true\\nStep 5: Stop \\n\")), mdx(\"h2\", null, \"Print multiplication table of a given number\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {}), \"Step 1: Start\\nStep 2: Initialize the value of i as 1\\nStep 3: Read the value of a number, N\\nStep 4: Check the condition i less than or equal to 10, if the condition is true goto step 4.1 else \\n            goto step 5\\n    Step 4.1: Calculate res=N*i \\n    Step 4.1: print N*i=res and increment the value of i by 1\\n    Step 4.2: Repeat the Step 4 until the condition is true\\nStep 5: Stop\\n\")), mdx(\"h2\", null, \"Print reverses of the given number\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {}), \"Step 1: Start\\nStep 2: Initialize the value of   reverse as 0 and reminder as 0\\nStep 3: Read any number, N\\nStep 4: Check the condition N is not equal to zero, if the condition is true goto step 4.1 else \\n                         goto step 5\\nStep 4.1: Calculate reminder = N %10\\nStep 4.2: Calculate reverse = reverser*10+ reminder\\nStep 4.3: Calculate N=N/10 and repeat the Step 4 until the condition is true\\nStep 5: print reverse\\nStep 6: Stop\\n\")), mdx(\"h2\", null, \"To find factorial of a given number\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {}), \"Step 1: Start\\nStep 2: Initialize the value of i as 1 and fact as 1\\nStep 3: Read the value of a number, num\\nStep 4: Check the condition num equal to 0, if the condition is true goto step 4.1 else goto step 4.2\\n    Step 4.1: print \\u201CFactorial of 0 is 1\\u201D\\n    Step 4.2: Check the condition i less than or equal to num, if the condition is true goto \\n                             step 4.2.1 else goto step 4.3\\n        Step 4.2.1: Calculate factorial as, fact=fact*i and increment the value of i by 1\\n        Step 4.2.2: Repeat the Step 4.2 until the condition is true\\nStep 4.3: print fact\\nStep 5: Stop\\n\")));\n}\n;\nMDXContent.isMDXComponent = true;","tableOfContents":{"items":[{"url":"#print-first-n-natural-numbers","title":"Print first N natural numbers"},{"url":"#print-sum-of-first-n-natural-numbers","title":"Print Sum of first N natural numbers"},{"url":"#print-odd-numbers-from-1-to-n","title":"Print odd numbers from 1 to N"},{"url":"#print-multiplication-table-of-a-given-number","title":"Print multiplication table of a given number"},{"url":"#print-reverses-of-the-given-number","title":"Print reverses of the given number"},{"url":"#to-find-factorial-of-a-given-number","title":"To find factorial of a given number"}]},"parent":{"relativePath":"Unit-I/2-building/3-Iteration Example.mdx"},"frontmatter":{"metaTitle":"Building Blocks of Algorithm - Iteration Examples","metaDescription":"Building Blocks of Algorithm - Iteration Examples"}},"allMdx":{"edges":[{"node":{"fields":{"slug":"/","title":"Syllabus"}}},{"node":{"fields":{"slug":"/Unit-I","title":"Unit-I"}}},{"node":{"fields":{"slug":"/Unit-II","title":"Unit - II"}}},{"node":{"fields":{"slug":"/Unit-III","title":"Unit - III"}}},{"node":{"fields":{"slug":"/Unit-IV","title":"Unit - IV"}}},{"node":{"fields":{"slug":"/Unit-V","title":"Unit - V"}}},{"node":{"fields":{"slug":"/Unit-I/1-algorithm","title":"Algorithms"}}},{"node":{"fields":{"slug":"/Unit-I/2-building","title":"Building Blocks of Algorithm"}}},{"node":{"fields":{"slug":"/Unit-I/3-functions","title":"Functions"}}},{"node":{"fields":{"slug":"/Unit-I/4-pseudocode","title":"Pseudocode"}}},{"node":{"fields":{"slug":"/Unit-I/5-Flowchart","title":"Flowchart"}}},{"node":{"fields":{"slug":"/Unit-I/6-aps","title":"Algorithmic Problem Solving"}}},{"node":{"fields":{"slug":"/Unit-I/7-illustrativeproblems","title":"Illustrative Problems"}}},{"node":{"fields":{"slug":"/Unit-II/1-Introduction","title":"Introduction to Python"}}},{"node":{"fields":{"slug":"/Unit-II/2-Installation","title":"Installation"}}},{"node":{"fields":{"slug":"/Unit-II/3-pythoninterpreter","title":"Interpreter"}}},{"node":{"fields":{"slug":"/Unit-II/4-values and types","title":"Values and Types"}}},{"node":{"fields":{"slug":"/Unit-II/5-variables","title":"Variables"}}},{"node":{"fields":{"slug":"/Unit-II/6-Expression","title":"Expressions"}}},{"node":{"fields":{"slug":"/Unit-II/7-statement","title":"Statements"}}},{"node":{"fields":{"slug":"/Unit-II/8-operators","title":"Operators"}}},{"node":{"fields":{"slug":"/Unit-II/9-precedence of operators","title":"Precedence of Operator"}}},{"node":{"fields":{"slug":"/Unit-II/comments","title":"Comments"}}},{"node":{"fields":{"slug":"/Unit-II/Illustrative programs","title":"Python Programs"}}},{"node":{"fields":{"slug":"/Unit-I/2-building/1-Sequence Examples","title":"Sequence Examples"}}},{"node":{"fields":{"slug":"/Unit-I/2-building/2-Selection Example","title":"Selection Examples"}}},{"node":{"fields":{"slug":"/Unit-I/2-building/3-Iteration Example","title":"Iteration Examples"}}},{"node":{"fields":{"slug":"/Unit-I/3-functions/1-function examples","title":"Function Examples"}}},{"node":{"fields":{"slug":"/Unit-I/4-pseudocode/examples","title":"Pseudocode examples"}}},{"node":{"fields":{"slug":"/Unit-I/7-illustrativeproblems/guess","title":"Guess a number"}}},{"node":{"fields":{"slug":"/Unit-II/8-operators/2-Comparison","title":"Comparison Operator"}}},{"node":{"fields":{"slug":"/Unit-II/8-operators/1-Arithmetic","title":"Arithmetic Operator"}}},{"node":{"fields":{"slug":"/Unit-II/8-operators/3-Logical","title":"Logical Operator"}}},{"node":{"fields":{"slug":"/Unit-II/8-operators/4-Bitwise","title":"Bitwise Operator"}}},{"node":{"fields":{"slug":"/Unit-II/8-operators/5-Assignment","title":"Assignment Operator"}}},{"node":{"fields":{"slug":"/Unit-II/8-operators/6-Membership","title":"Memebership Operator"}}},{"node":{"fields":{"slug":"/Unit-II/8-operators/7-identity","title":"Identity Operator"}}}]}},"pageContext":{"isCreatedByStatefulCreatePages":false,"id":"eb78e8d5-c932-5ae9-84ff-469a754ca658"}}}