{"componentChunkName":"component---src-templates-docs-js","path":"/Unit-I/4-pseudocode/examples","result":{"data":{"site":{"siteMetadata":{"title":"GE8151 - Problem Solving with Python Programming","docsLocation":"https://github.com/madhusona/GE8151/tree/master/content"}},"mdx":{"fields":{"id":"e8c39e99-860f-5826-8cec-a16cfc63b83f","title":"Pseudocode examples","slug":"/Unit-I/4-pseudocode/examples"},"body":"function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsx mdx */\nvar _frontmatter = {\n  \"title\": \"Pseudocode examples\"\n};\n\nvar makeShortcode = function makeShortcode(name) {\n  return function MDXDefaultShortcode(props) {\n    console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\");\n    return mdx(\"div\", props);\n  };\n};\n\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, [\"components\"]);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"h2\", null, \"Swapping of two numbers without additional variable\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {}), \"READ a, b\\nCOMPUTE a=a+b\\nCOMPUTE  b=a-b\\nCOMPUTE a=a-b\\nPRINT a,b\\n\")), mdx(\"h2\", null, \"Greatest among two numbers\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {}), \"READ A, B\\nIF A>B THEN\\n      PRINT \\u201CA is the greatest number\\u201D\\nELSE \\n      PRINT \\u201CB is the greatest number\\u201D\\nENDIF\\n\\n\")), mdx(\"h2\", null, \"Find the average of first n numbers\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {}), \"READ n\\nSET avg=0, sum=0, i=1\\nWHILE i<=n\\n     COMPUTE sum=sum+i\\n     INCREMENT i=i+1\\nEND WHILE\\nCOMPUTE avg=sum/i\\nPRINT sum, avg\\n\\n\")), mdx(\"h2\", null, \"To find square of a number\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {}), \"READ num\\nCALCULATE square of a number as, square=num*num\\nPRINT square\\n\")), mdx(\"h2\", null, \"To calculate the price of a product after adding the sales tax to its original price\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {}), \"READ the price of the product X\\nREAD the sales tax rate Y\\nCALCULATE sales_tax=X * Y\\nCALCULATE final_product_price=X + sales_tax\\nPRINT final_product_price\\n\")), mdx(\"h2\", null, \"To check whether the given number is divisible by 7 or not.\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {}), \"READ number\\nIF number MOD 7 = 0 THEN\\n              DISPLAY \\\"Number is divisible by 7\\\"\\n    ELSE\\n              DISPLAY \\\"Number is not divisible by 7\\\"\\nEND IF\\n\")), mdx(\"h2\", null, \"To check whether the given student is honor student or not based on grade point average and hours completed.\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {}), \"GET Student Name\\nGET Grade Point Average from User\\nGET Hours Completed from User\\n IF Grade Point Average is greater than 3.5 THEN\\n          IF Hours Completed is greater than or equal to 15 THEN\\n                   DISPLAY Student Name \\u201Cis Honor Student\\u201D\\n          END IF\\nEND IF\\n\")), mdx(\"h2\", null, \"factorial of the given number\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {}), \"READ num\\nINITIALIZE i=1, FACT=1\\nFOR i \\u2190 1 to num \\n     COMPUTE FACT=FACT*i\\nENDFOR \\nPRINT \\u201CThe Factorial is=\\u201D FACT\\n\")));\n}\n;\nMDXContent.isMDXComponent = true;","tableOfContents":{"items":[{"url":"#swapping-of-two-numbers-without-additional-variable","title":"Swapping of two numbers without additional variable"},{"url":"#greatest-among-two-numbers","title":"Greatest among two numbers"},{"url":"#find-the-average-of-first-n-numbers","title":"Find the average of first n numbers"},{"url":"#to-find-square-of-a-number","title":"To find square of a number"},{"url":"#to-calculate-the-price-of-a-product-after-adding-the-sales-tax-to-its-original-price","title":"To calculate the price of a product after adding the sales tax to its original price"},{"url":"#to-check-whether-the-given-number-is-divisible-by-7-or-not","title":"To check whether the given number is divisible by 7 or not."},{"url":"#to-check-whether-the-given-student-is-honor-student-or-not-based-on-grade-point-average-and-hours-completed","title":"To check whether the given student is honor student or not based on grade point average and hours completed."},{"url":"#factorial-of-the-given-number","title":"factorial of the given number"}]},"parent":{"relativePath":"Unit-I/4-pseudocode/examples.mdx"},"frontmatter":{"metaTitle":null,"metaDescription":null}},"allMdx":{"edges":[{"node":{"fields":{"slug":"/","title":"Syllabus"}}},{"node":{"fields":{"slug":"/Unit-I","title":"Unit-I"}}},{"node":{"fields":{"slug":"/Unit-II","title":"Unit - II"}}},{"node":{"fields":{"slug":"/Unit-III","title":"Unit - III"}}},{"node":{"fields":{"slug":"/Unit-IV","title":"Unit - IV"}}},{"node":{"fields":{"slug":"/Unit-V","title":"Unit - V"}}},{"node":{"fields":{"slug":"/Unit-I/1-algorithm","title":"Algorithms"}}},{"node":{"fields":{"slug":"/Unit-I/2-building","title":"Building Blocks of Algorithm"}}},{"node":{"fields":{"slug":"/Unit-I/3-functions","title":"Functions"}}},{"node":{"fields":{"slug":"/Unit-I/4-pseudocode","title":"Pseudocode"}}},{"node":{"fields":{"slug":"/Unit-I/5-Flowchart","title":"Flowchart"}}},{"node":{"fields":{"slug":"/Unit-I/6-aps","title":"Algorithmic Problem Solving"}}},{"node":{"fields":{"slug":"/Unit-I/7-illustrativeproblems","title":"Illustrative Problems"}}},{"node":{"fields":{"slug":"/Unit-II/1-Introduction","title":"Introduction to Python"}}},{"node":{"fields":{"slug":"/Unit-II/2-Installation","title":"Installation"}}},{"node":{"fields":{"slug":"/Unit-II/3-pythoninterpreter","title":"Interpreter"}}},{"node":{"fields":{"slug":"/Unit-II/4-values and types","title":"Values and Types"}}},{"node":{"fields":{"slug":"/Unit-II/5-variables","title":"Variables"}}},{"node":{"fields":{"slug":"/Unit-II/6-Expression","title":"Expressions"}}},{"node":{"fields":{"slug":"/Unit-II/7-statement","title":"Statements"}}},{"node":{"fields":{"slug":"/Unit-II/8-operators","title":"Operators"}}},{"node":{"fields":{"slug":"/Unit-II/9-precedence of operators","title":"Precedence of Operator"}}},{"node":{"fields":{"slug":"/Unit-II/comments","title":"Comments"}}},{"node":{"fields":{"slug":"/Unit-II/Illustrative programs","title":"Python Programs"}}},{"node":{"fields":{"slug":"/Unit-I/2-building/1-Sequence Examples","title":"Sequence Examples"}}},{"node":{"fields":{"slug":"/Unit-I/2-building/2-Selection Example","title":"Selection Examples"}}},{"node":{"fields":{"slug":"/Unit-I/2-building/3-Iteration Example","title":"Iteration Examples"}}},{"node":{"fields":{"slug":"/Unit-I/3-functions/1-function examples","title":"Function Examples"}}},{"node":{"fields":{"slug":"/Unit-I/4-pseudocode/examples","title":"Pseudocode examples"}}},{"node":{"fields":{"slug":"/Unit-I/7-illustrativeproblems/guess","title":"Guess a number"}}},{"node":{"fields":{"slug":"/Unit-II/8-operators/2-Comparison","title":"Comparison Operator"}}},{"node":{"fields":{"slug":"/Unit-II/8-operators/1-Arithmetic","title":"Arithmetic Operator"}}},{"node":{"fields":{"slug":"/Unit-II/8-operators/3-Logical","title":"Logical Operator"}}},{"node":{"fields":{"slug":"/Unit-II/8-operators/4-Bitwise","title":"Bitwise Operator"}}},{"node":{"fields":{"slug":"/Unit-II/8-operators/5-Assignment","title":"Assignment Operator"}}},{"node":{"fields":{"slug":"/Unit-II/8-operators/6-Membership","title":"Memebership Operator"}}},{"node":{"fields":{"slug":"/Unit-II/8-operators/7-identity","title":"Identity Operator"}}}]}},"pageContext":{"isCreatedByStatefulCreatePages":false,"id":"e8c39e99-860f-5826-8cec-a16cfc63b83f"}}}