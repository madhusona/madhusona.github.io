{"version":3,"sources":["webpack:///path---linear-data-structures-list-26876e8a8d9e4e2b2b1f.js","webpack:///./.cache/json/linear-data-structures-list.json"],"names":["webpackJsonp","409","module","exports","data","postBySlug","html","timeToRead","excerpt","frontmatter","title","cover","date","category","tags","tableOfContents","chapters","entries","entry","id","childMarkdownRemark","fields","slug","pathContext"],"mappings":"AAAAA,cAAc,iBAERC,IACA,SAAUC,EAAQC,GCHxBD,EAAAC,SAAkBC,MAAQC,YAAcC,KAAA,kgQAAwnQC,WAAA,EAAAC,QAAA,4IAAgNC,aAAgCC,MAAA,gCAAAC,MAAA,KAAAC,KAAA,KAAAC,SAAA,KAAAC,KAAA,OAA8FC,iBAAoBC,WAAaN,MAAA,kBAAAO,QAAA,KAAAD,WAAsDN,MAAA,kCAAAO,UAAsDC,OAASC,GAAA,qGAAAC,qBAAiIC,QAAUC,KAAA,gCAAsCb,aAAgBC,MAAA,qCAA2CM,WAAeN,MAAA,uBAAAO,UAA2CC,OAASC,GAAA,qGAAAC,qBAAiIC,QAAUC,KAAA,eAAqBb,aAAgBC,MAAA,kBAA0BQ,OAASC,GAAA,uGAAAC,qBAAmIC,QAAUC,KAAA,iBAAuBb,aAAgBC,MAAA,wBAAgCA,MAAA,iBAAAO,UAAqCC,OAASC,GAAA,sGAAAC,qBAAkIC,QAAUC,KAAA,gBAAsBb,aAAgBC,MAAA,mBAAyBM,SAAA,SAAsBN,MAAA,kBAAAO,QAAA,KAAAD,WAAsDN,MAAA,iBAAAO,UAAqCC,OAASC,GAAA,sGAAAC,qBAAkIC,QAAUC,KAAA,gBAAsBb,aAAgBC,MAAA,mBAAyBM,SAAA,SAAsBN,MAAA,kBAAAO,UAAsCC,OAASC,GAAA,qGAAAC,qBAAiIC,QAAUC,KAAA,eAAqBb,aAAgBC,MAAA,kBAAwBM,SAAA,SAAqBO,aAAgBD,KAAA","file":"path---linear-data-structures-list-26876e8a8d9e4e2b2b1f.js","sourcesContent":["webpackJsonp([145493126987846],{\n\n/***/ 409:\n/***/ (function(module, exports) {\n\n\tmodule.exports = {\"data\":{\"postBySlug\":{\"html\":\"<h4 id=\\\"abstract-data-typesadt\\\"><a href=\\\"#abstract-data-typesadt\\\" aria-hidden=\\\"true\\\" class=\\\"anchor\\\"><svg aria-hidden=\\\"true\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg></a>Abstract Data Types(ADT):</h4>\\n<p>An abstract data type is a set of operations. Abstract data types are mathematical abstractions; only mentions what operations are to be performed but not how these operations will be implemented.</p>\\n<ul>\\n<li>List ADT   </li>\\n<li>Stack ADT  </li>\\n<li>Queue ADT.</li>\\n</ul>\\n<p><strong>Abstraction:</strong>\\nThe process of providing only the essentials and hiding the details is known as abstraction.</p>\\n<p><strong>List ADT:</strong>\\nA List contains elements of same type arranged in sequential order. A general list of size N is.\\nA1,A2,A3...AN</p>\\n<h4 id=\\\"array-based-implementationlist-adt\\\"><a href=\\\"#array-based-implementationlist-adt\\\" aria-hidden=\\\"true\\\" class=\\\"anchor\\\"><svg aria-hidden=\\\"true\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg></a>Array Based Implementation(LIST ADT):</h4>\\n<p>(similar to STACK ADT array based implementation)\\nAn array is a collection of similar data elements. These data elements have the same data type. The elements of the array are stored in consecutive memory locations and are referenced by an index (subscript).\\n<img src=\\\"https://docs.google.com/a/karpagamtech.ac.in/drawings/d/sBc0L5dlYrZD8-JdhoTFcGg/image?w=472&#x26;h=104&#x26;rev=1&#x26;ac=1&#x26;parent=1mfKeDTXrLmz9d1zvsi3i3Mme0WWx6Ej8hRrupGDBMn0\\\"></p>\\n<p>The Structure contains the Capacity and Top fields.</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-none\\\"><code>Struct ArrayRecord    \\n{\\n    int capacity;\\n    int Top;\\n    int *arr;\\n};</code></pre>\\n      </div>\\n<p>  <strong>Array Creation:</strong>\\nIt creates a array of a given maximum size. It allocates the array structure and array.</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-none\\\"><code>Array CreateArray( int MaxElements )  \\n{  \\n    Array A;;  \\n    A = malloc( sizeof( struct ArrayRecord ) );  \\n    if( A == NULL )  \\n\\t    printf( \\\"Out of space!!!\\\" );    \\n    A->Array = malloc( sizeof( ElementType ) * MaxElements );  \\n    if( A->Array == NULL )  \\n\\t    printf( \\\"Out of space!!!\\\" );  \\n    A->Capacity = MaxElements;  \\n    A->Top=-1;  \\n    return A;\\n}</code></pre>\\n      </div>\\n<p>int Capacity=10;\\nint TOP=0;</p>\\n<h4 id=\\\"is-emptylist\\\"><a href=\\\"#is-emptylist\\\" aria-hidden=\\\"true\\\" class=\\\"anchor\\\"><svg aria-hidden=\\\"true\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg></a>Is Empty(LIST):**</h4>\\n<p>Function to test whether a List is empty.</p>\\n<p><img src=\\\"https://docs.google.com/a/karpagamtech.ac.in/drawings/d/sLFFnQ9mGgpk60NlteuGGPA/image?w=472&#x26;h=104&#x26;rev=91&#x26;ac=1&#x26;parent=1mfKeDTXrLmz9d1zvsi3i3Mme0WWx6Ej8hRrupGDBMn0\\\"></p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-none\\\"><code>int IsEmpty( Array A )  \\n{  \\n    return A->Top == -1;  \\n}</code></pre>\\n      </div>\\n<h4 id=\\\"is-fulllist\\\"><a href=\\\"#is-fulllist\\\" aria-hidden=\\\"true\\\" class=\\\"anchor\\\"><svg aria-hidden=\\\"true\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg></a>Is Full(LIST):</h4>\\n<p>Function to test whether a List is full\\n<img src=\\\"https://docs.google.com/a/karpagamtech.ac.in/drawings/d/s4uKnh8_XlfhfZR1YZmPBFA/image?w=472&#x26;h=104&#x26;rev=9&#x26;ac=1&#x26;parent=1mfKeDTXrLmz9d1zvsi3i3Mme0WWx6Ej8hRrupGDBMn0\\\"></p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-none\\\"><code>int IsFull( Array A )  \\n{  \\nreturn A->Top == S->Capacity - 1;  \\n}</code></pre>\\n      </div>\\n<h4 id=\\\"insert-element-to-end-of-the-list\\\"><a href=\\\"#insert-element-to-end-of-the-list\\\" aria-hidden=\\\"true\\\" class=\\\"anchor\\\"><svg aria-hidden=\\\"true\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg></a>Insert Element to End of the LIST:</h4>\\n<p>Check that weather the List is full or not</p>\\n<ul>\\n<li>\\n<p>If List is full return error message ”List is full. Can’t Insert”.</p>\\n</li>\\n<li>\\n<p>If List is not full.\\n-   Insert the element to the Position<br>\\n-   Increase the Top by 1</p>\\n</li>\\n</ul>\\n<p><strong>Before Insert:</strong><br>\\nCapacity=10;Top=3;</p>\\n<p><img src=\\\"https://docs.google.com/a/karpagamtech.ac.in/drawings/d/sWLX9eIVGfS6yYoz538ra5w/image?w=298&#x26;h=66&#x26;rev=5&#x26;ac=1&#x26;parent=1mfKeDTXrLmz9d1zvsi3i3Mme0WWx6Ej8hRrupGDBMn0\\\"></p>\\n<p><strong>After Insert:</strong>\\nCapacity=10;<code>enter code here</code>\\nTop=4;\\n<img src=\\\"https://docs.google.com/a/karpagamtech.ac.in/drawings/d/sTM_WrBLwvs0Pr4Ioj9OcYQ/image?w=298&#x26;h=65&#x26;rev=1&#x26;ac=1&#x26;parent=1mfKeDTXrLmz9d1zvsi3i3Mme0WWx6Ej8hRrupGDBMn0\\\"></p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-none\\\"><code>void insert( int X, Array A )  \\n{  \\n    if( IsFull( A) )  \\n\\t    printf( \\\"Full Array\\\" );  \\n    else  \\n\\t    A->arr[ ++A->Top ] = X;\\n}</code></pre>\\n      </div>\\n<h4 id=\\\"delete-element-from-end-of-the-list\\\"><a href=\\\"#delete-element-from-end-of-the-list\\\" aria-hidden=\\\"true\\\" class=\\\"anchor\\\"><svg aria-hidden=\\\"true\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg></a>Delete Element from End of the LIST:</h4>\\n<p>Check that weather the List is empty or not</p>\\n<ul>\\n<li>If List is empty return error message ”List is Empty. Can't Delete”.    </li>\\n<li>\\n<p>If List is not Empty.  </p>\\n<ul>\\n<li>Delete the element from the Position</li>\\n<li>Decrease the Top by 1  </li>\\n</ul>\\n</li>\\n</ul>\\n<p><strong>Before Delete:</strong>\\nCapacity=10;TOP=4</p>\\n<p><img src=\\\"https://docs.google.com/a/karpagamtech.ac.in/drawings/d/s6bxsfltYKmtGC-Ur2I8UGg/image?w=298&#x26;h=65&#x26;rev=1&#x26;ac=1&#x26;parent=1mfKeDTXrLmz9d1zvsi3i3Mme0WWx6Ej8hRrupGDBMn0\\\"></p>\\n<p><strong>After Delete:</strong>\\nCapacity=10;TOP=3;</p>\\n<p><img src=\\\"https://docs.google.com/a/karpagamtech.ac.in/drawings/d/sNh21d93oblhnKZQ9scBweQ/image?w=298&#x26;h=66&#x26;rev=1&#x26;ac=1&#x26;parent=1mfKeDTXrLmz9d1zvsi3i3Mme0WWx6Ej8hRrupGDBMn0\\\"></p>\",\"timeToRead\":2,\"excerpt\":\"Abstract Data Types(ADT): An abstract data type is a set of operations. Abstract data types are mathematical abstractions; only mentions…\",\"frontmatter\":{\"title\":\"LINEAR DATA STRUCTURES – LIST\",\"cover\":null,\"date\":null,\"category\":null,\"tags\":null}},\"tableOfContents\":{\"chapters\":[{\"title\":\"Data Structures\",\"entries\":null,\"chapters\":[{\"title\":\"1 LINEAR DATA STRUCTURES – LIST\",\"entries\":[{\"entry\":{\"id\":\"/home/bairappan/Documents/gatsby-starter-docs-master/content/lessons/lesson_one.md absPath of file\",\"childMarkdownRemark\":{\"fields\":{\"slug\":\"/linear-data-structures-list\"},\"frontmatter\":{\"title\":\"LINEAR DATA STRUCTURES – LIST\"}}}}],\"chapters\":[{\"title\":\"1.1.1 Sub-subchapter\",\"entries\":[{\"entry\":{\"id\":\"/home/bairappan/Documents/gatsby-starter-docs-master/content/lessons/lesson_two.md absPath of file\",\"childMarkdownRemark\":{\"fields\":{\"slug\":\"/lesson-two\"},\"frontmatter\":{\"title\":\"Lesson Two\"}}}},{\"entry\":{\"id\":\"/home/bairappan/Documents/gatsby-starter-docs-master/content/lessons/lesson_three.md absPath of file\",\"childMarkdownRemark\":{\"fields\":{\"slug\":\"/lesson-three\"},\"frontmatter\":{\"title\":\"Lesson Three\"}}}}]}]},{\"title\":\"1.2 Subchapter\",\"entries\":[{\"entry\":{\"id\":\"/home/bairappan/Documents/gatsby-starter-docs-master/content/lessons/lesson_four.md absPath of file\",\"childMarkdownRemark\":{\"fields\":{\"slug\":\"/lesson-four\"},\"frontmatter\":{\"title\":\"Lesson Four\"}}}}],\"chapters\":null}]},{\"title\":\"2. Main Chapter\",\"entries\":null,\"chapters\":[{\"title\":\"2.1 Subchapter\",\"entries\":[{\"entry\":{\"id\":\"/home/bairappan/Documents/gatsby-starter-docs-master/content/lessons/lesson_five.md absPath of file\",\"childMarkdownRemark\":{\"fields\":{\"slug\":\"/lesson-five\"},\"frontmatter\":{\"title\":\"Lesson Five\"}}}}],\"chapters\":null}]},{\"title\":\"3. Main Chapter\",\"entries\":[{\"entry\":{\"id\":\"/home/bairappan/Documents/gatsby-starter-docs-master/content/lessons/lesson_six.md absPath of file\",\"childMarkdownRemark\":{\"fields\":{\"slug\":\"/lesson-six\"},\"frontmatter\":{\"title\":\"Lesson Six\"}}}}],\"chapters\":null}]}},\"pathContext\":{\"slug\":\"/linear-data-structures-list\"}}\n\n/***/ })\n\n});\n\n\n// WEBPACK FOOTER //\n// path---linear-data-structures-list-26876e8a8d9e4e2b2b1f.js","module.exports = {\"data\":{\"postBySlug\":{\"html\":\"<h4 id=\\\"abstract-data-typesadt\\\"><a href=\\\"#abstract-data-typesadt\\\" aria-hidden=\\\"true\\\" class=\\\"anchor\\\"><svg aria-hidden=\\\"true\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg></a>Abstract Data Types(ADT):</h4>\\n<p>An abstract data type is a set of operations. Abstract data types are mathematical abstractions; only mentions what operations are to be performed but not how these operations will be implemented.</p>\\n<ul>\\n<li>List ADT   </li>\\n<li>Stack ADT  </li>\\n<li>Queue ADT.</li>\\n</ul>\\n<p><strong>Abstraction:</strong>\\nThe process of providing only the essentials and hiding the details is known as abstraction.</p>\\n<p><strong>List ADT:</strong>\\nA List contains elements of same type arranged in sequential order. A general list of size N is.\\nA1,A2,A3...AN</p>\\n<h4 id=\\\"array-based-implementationlist-adt\\\"><a href=\\\"#array-based-implementationlist-adt\\\" aria-hidden=\\\"true\\\" class=\\\"anchor\\\"><svg aria-hidden=\\\"true\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg></a>Array Based Implementation(LIST ADT):</h4>\\n<p>(similar to STACK ADT array based implementation)\\nAn array is a collection of similar data elements. These data elements have the same data type. The elements of the array are stored in consecutive memory locations and are referenced by an index (subscript).\\n<img src=\\\"https://docs.google.com/a/karpagamtech.ac.in/drawings/d/sBc0L5dlYrZD8-JdhoTFcGg/image?w=472&#x26;h=104&#x26;rev=1&#x26;ac=1&#x26;parent=1mfKeDTXrLmz9d1zvsi3i3Mme0WWx6Ej8hRrupGDBMn0\\\"></p>\\n<p>The Structure contains the Capacity and Top fields.</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-none\\\"><code>Struct ArrayRecord    \\n{\\n    int capacity;\\n    int Top;\\n    int *arr;\\n};</code></pre>\\n      </div>\\n<p>  <strong>Array Creation:</strong>\\nIt creates a array of a given maximum size. It allocates the array structure and array.</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-none\\\"><code>Array CreateArray( int MaxElements )  \\n{  \\n    Array A;;  \\n    A = malloc( sizeof( struct ArrayRecord ) );  \\n    if( A == NULL )  \\n\\t    printf( \\\"Out of space!!!\\\" );    \\n    A->Array = malloc( sizeof( ElementType ) * MaxElements );  \\n    if( A->Array == NULL )  \\n\\t    printf( \\\"Out of space!!!\\\" );  \\n    A->Capacity = MaxElements;  \\n    A->Top=-1;  \\n    return A;\\n}</code></pre>\\n      </div>\\n<p>int Capacity=10;\\nint TOP=0;</p>\\n<h4 id=\\\"is-emptylist\\\"><a href=\\\"#is-emptylist\\\" aria-hidden=\\\"true\\\" class=\\\"anchor\\\"><svg aria-hidden=\\\"true\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg></a>Is Empty(LIST):**</h4>\\n<p>Function to test whether a List is empty.</p>\\n<p><img src=\\\"https://docs.google.com/a/karpagamtech.ac.in/drawings/d/sLFFnQ9mGgpk60NlteuGGPA/image?w=472&#x26;h=104&#x26;rev=91&#x26;ac=1&#x26;parent=1mfKeDTXrLmz9d1zvsi3i3Mme0WWx6Ej8hRrupGDBMn0\\\"></p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-none\\\"><code>int IsEmpty( Array A )  \\n{  \\n    return A->Top == -1;  \\n}</code></pre>\\n      </div>\\n<h4 id=\\\"is-fulllist\\\"><a href=\\\"#is-fulllist\\\" aria-hidden=\\\"true\\\" class=\\\"anchor\\\"><svg aria-hidden=\\\"true\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg></a>Is Full(LIST):</h4>\\n<p>Function to test whether a List is full\\n<img src=\\\"https://docs.google.com/a/karpagamtech.ac.in/drawings/d/s4uKnh8_XlfhfZR1YZmPBFA/image?w=472&#x26;h=104&#x26;rev=9&#x26;ac=1&#x26;parent=1mfKeDTXrLmz9d1zvsi3i3Mme0WWx6Ej8hRrupGDBMn0\\\"></p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-none\\\"><code>int IsFull( Array A )  \\n{  \\nreturn A->Top == S->Capacity - 1;  \\n}</code></pre>\\n      </div>\\n<h4 id=\\\"insert-element-to-end-of-the-list\\\"><a href=\\\"#insert-element-to-end-of-the-list\\\" aria-hidden=\\\"true\\\" class=\\\"anchor\\\"><svg aria-hidden=\\\"true\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg></a>Insert Element to End of the LIST:</h4>\\n<p>Check that weather the List is full or not</p>\\n<ul>\\n<li>\\n<p>If List is full return error message ”List is full. Can’t Insert”.</p>\\n</li>\\n<li>\\n<p>If List is not full.\\n-   Insert the element to the Position<br>\\n-   Increase the Top by 1</p>\\n</li>\\n</ul>\\n<p><strong>Before Insert:</strong><br>\\nCapacity=10;Top=3;</p>\\n<p><img src=\\\"https://docs.google.com/a/karpagamtech.ac.in/drawings/d/sWLX9eIVGfS6yYoz538ra5w/image?w=298&#x26;h=66&#x26;rev=5&#x26;ac=1&#x26;parent=1mfKeDTXrLmz9d1zvsi3i3Mme0WWx6Ej8hRrupGDBMn0\\\"></p>\\n<p><strong>After Insert:</strong>\\nCapacity=10;<code>enter code here</code>\\nTop=4;\\n<img src=\\\"https://docs.google.com/a/karpagamtech.ac.in/drawings/d/sTM_WrBLwvs0Pr4Ioj9OcYQ/image?w=298&#x26;h=65&#x26;rev=1&#x26;ac=1&#x26;parent=1mfKeDTXrLmz9d1zvsi3i3Mme0WWx6Ej8hRrupGDBMn0\\\"></p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-none\\\"><code>void insert( int X, Array A )  \\n{  \\n    if( IsFull( A) )  \\n\\t    printf( \\\"Full Array\\\" );  \\n    else  \\n\\t    A->arr[ ++A->Top ] = X;\\n}</code></pre>\\n      </div>\\n<h4 id=\\\"delete-element-from-end-of-the-list\\\"><a href=\\\"#delete-element-from-end-of-the-list\\\" aria-hidden=\\\"true\\\" class=\\\"anchor\\\"><svg aria-hidden=\\\"true\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg></a>Delete Element from End of the LIST:</h4>\\n<p>Check that weather the List is empty or not</p>\\n<ul>\\n<li>If List is empty return error message ”List is Empty. Can't Delete”.    </li>\\n<li>\\n<p>If List is not Empty.  </p>\\n<ul>\\n<li>Delete the element from the Position</li>\\n<li>Decrease the Top by 1  </li>\\n</ul>\\n</li>\\n</ul>\\n<p><strong>Before Delete:</strong>\\nCapacity=10;TOP=4</p>\\n<p><img src=\\\"https://docs.google.com/a/karpagamtech.ac.in/drawings/d/s6bxsfltYKmtGC-Ur2I8UGg/image?w=298&#x26;h=65&#x26;rev=1&#x26;ac=1&#x26;parent=1mfKeDTXrLmz9d1zvsi3i3Mme0WWx6Ej8hRrupGDBMn0\\\"></p>\\n<p><strong>After Delete:</strong>\\nCapacity=10;TOP=3;</p>\\n<p><img src=\\\"https://docs.google.com/a/karpagamtech.ac.in/drawings/d/sNh21d93oblhnKZQ9scBweQ/image?w=298&#x26;h=66&#x26;rev=1&#x26;ac=1&#x26;parent=1mfKeDTXrLmz9d1zvsi3i3Mme0WWx6Ej8hRrupGDBMn0\\\"></p>\",\"timeToRead\":2,\"excerpt\":\"Abstract Data Types(ADT): An abstract data type is a set of operations. Abstract data types are mathematical abstractions; only mentions…\",\"frontmatter\":{\"title\":\"LINEAR DATA STRUCTURES – LIST\",\"cover\":null,\"date\":null,\"category\":null,\"tags\":null}},\"tableOfContents\":{\"chapters\":[{\"title\":\"Data Structures\",\"entries\":null,\"chapters\":[{\"title\":\"1 LINEAR DATA STRUCTURES – LIST\",\"entries\":[{\"entry\":{\"id\":\"/home/bairappan/Documents/gatsby-starter-docs-master/content/lessons/lesson_one.md absPath of file\",\"childMarkdownRemark\":{\"fields\":{\"slug\":\"/linear-data-structures-list\"},\"frontmatter\":{\"title\":\"LINEAR DATA STRUCTURES – LIST\"}}}}],\"chapters\":[{\"title\":\"1.1.1 Sub-subchapter\",\"entries\":[{\"entry\":{\"id\":\"/home/bairappan/Documents/gatsby-starter-docs-master/content/lessons/lesson_two.md absPath of file\",\"childMarkdownRemark\":{\"fields\":{\"slug\":\"/lesson-two\"},\"frontmatter\":{\"title\":\"Lesson Two\"}}}},{\"entry\":{\"id\":\"/home/bairappan/Documents/gatsby-starter-docs-master/content/lessons/lesson_three.md absPath of file\",\"childMarkdownRemark\":{\"fields\":{\"slug\":\"/lesson-three\"},\"frontmatter\":{\"title\":\"Lesson Three\"}}}}]}]},{\"title\":\"1.2 Subchapter\",\"entries\":[{\"entry\":{\"id\":\"/home/bairappan/Documents/gatsby-starter-docs-master/content/lessons/lesson_four.md absPath of file\",\"childMarkdownRemark\":{\"fields\":{\"slug\":\"/lesson-four\"},\"frontmatter\":{\"title\":\"Lesson Four\"}}}}],\"chapters\":null}]},{\"title\":\"2. Main Chapter\",\"entries\":null,\"chapters\":[{\"title\":\"2.1 Subchapter\",\"entries\":[{\"entry\":{\"id\":\"/home/bairappan/Documents/gatsby-starter-docs-master/content/lessons/lesson_five.md absPath of file\",\"childMarkdownRemark\":{\"fields\":{\"slug\":\"/lesson-five\"},\"frontmatter\":{\"title\":\"Lesson Five\"}}}}],\"chapters\":null}]},{\"title\":\"3. Main Chapter\",\"entries\":[{\"entry\":{\"id\":\"/home/bairappan/Documents/gatsby-starter-docs-master/content/lessons/lesson_six.md absPath of file\",\"childMarkdownRemark\":{\"fields\":{\"slug\":\"/lesson-six\"},\"frontmatter\":{\"title\":\"Lesson Six\"}}}}],\"chapters\":null}]}},\"pathContext\":{\"slug\":\"/linear-data-structures-list\"}}\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/json-loader!./.cache/json/linear-data-structures-list.json\n// module id = 409\n// module chunks = 145493126987846"],"sourceRoot":""}