{"componentChunkName":"component---src-templates-docs-js","path":"/Unit-I/2-building/2-Selection Example","result":{"data":{"site":{"siteMetadata":{"title":"GE8151 - Problem Solving with Python Programming","docsLocation":"https://github.com/madhusona/GE8151/tree/master/content"}},"mdx":{"fields":{"id":"6b046a4f-775d-55c1-b98b-b66541a008fc","title":"Selection Examples","slug":"/Unit-I/2-building/2-Selection Example"},"body":"function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsx mdx */\nvar _frontmatter = {\n  \"title\": \"Selection Examples\",\n  \"metaTitle\": \"Building Blocks of Algorithm - Selection Examples\",\n  \"metaDescription\": \"Building Blocks of Algorithm - Selection Examples\"\n};\n\nvar makeShortcode = function makeShortcode(name) {\n  return function MDXDefaultShortcode(props) {\n    console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\");\n    return mdx(\"div\", props);\n  };\n};\n\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, [\"components\"]);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"h2\", null, \"Find the smallest of given two numbers\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {}), \"Step 1 : Start\\nStep 2 : Read values of two numbers, A and B\\nStep 3 : Check whether A is less than B, if the condition is true then  goto step 3.1 else goto step 3.2\\n      Step 3.1:print A is the smallest number\\n      Step 3.2: print B is the smallest number\\nStep 4 : Stop\\n\")), mdx(\"h2\", null, \"Check whether the given number is three digit number or not\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {}), \"Step 1 : Start\\nStep 2 : Read the number, A\\nStep 3 : Check whether the given number is greater than 99 and less than 1000, if yes then goto step 3.1 otherwise goto step 3.2\\n      Step 3.1: Print the message \\u201CThe number is a three digit number\\u201D\\n      Step 3.2: Print the message \\u201CThe number is not a three digit number\\u201D\\nStep 4 : Stop\\n\")), mdx(\"h2\", null, \"Check whether the given year is Leap Year or not.\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {}), \"Step 1 : Start\\nStep 2 : Read the value of the year\\nStep 3: Check whether the given year is divisible by 4 and not divisible by 100, if yes goto 3.1 otherwise goto 3.2\\n            Step 3.1: print the message \\u201CIt is Leap year\\u201D \\n            Step 3.2: Check whether the given year is divisible by 400, if yes goto 3.2.1 otherwise goto 3.2.2\\n                Step 3.2.1: print the message \\u201CIt is Leap year\\u201D\\n                Step 3.2.2: print the message \\u201CIt is not Leap year\\u201D\\nStep 4 : Stop\\n\")), mdx(\"h2\", null, \"Calculate purchase amount to be paid after discount. Consider 10 % discount for the Sale amount above 1000.\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {}), \"Step 1: Start \\nStep 2: Read price\\nStep 3: Read quantity\\nStep 4: Calculate amount as \\n    Purchase Amount = price * quantity\\nStep 5: Check whether amount is greater than or equal to 1000, if yes then goto step 5.1 otherwise goto step 6\\n    Step 5.1: Calculate discount as \\n                Discount Amount = Purchase Amount * 0.10\\n    Step 5.2 : Calculate amount to be paid\\n            Paid Amount= amount - discount  \\nStep 6: Print the value of amount\\nStep 7: Stop\\n\")), mdx(\"h2\", null, \"Find whether the given number is positive or negative\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {}), \"Step 1: Start \\nStep 2: Read the number\\nStep 3: Check whether number is greater than or equal to zero, if yes then goto step 3.1 otherwise goto step 3.2\\n    Step 3.1: Print the message \\\"number is Positive\\\"\\n    Step 3.2: Print the message \\\"number is Negative\\\"\\nStep 4: Stop\\n\")), mdx(\"h2\", null, \"Find the given number is odd or even\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {}), \"Step 1: Start \\nStep 2: Read the number\\nStep 3: Calculate the remainder as\\n    remainder = number % 2\\nStep 3: Check whether remainder is equal to zero, if yes then goto step 3.1 otherwise goto step 3.2\\n    Step 3.1: Print the message \\\"number is Even\\\"\\n    Step 3.2: Print the message \\\"number is ODD\\\"\\nStep 4: Stop\\n\")), mdx(\"h2\", null, \"Identify whether the given number is smallest among three numbers\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {}), \"Step 1: Start \\nStep 2: Read the num1, num2 and num3\\nStep 3: Check whether num1 is less than num2 and also num1 is less than num3, if yes then goto step 3.1  Otherwise check whether num2 is less than num3, \\n    If yes, goto step 3.2 otherwise goto 3.3\\n    Step 3.1: Print the message \\\"num1 is lesser\\\"\\n    Step 3.2: Print the message \\\"num2 is lesser\\\"\\n    Step 3.3: Print the message \\\"num3 is lesser\\\"\\nStep 4: Stop\\n\")), mdx(\"h2\", null, \"Read total shopping amount purchased in the shop, and then apply the discount as per the following discount criteria, then find and print the final amount that has to be paid by the customer after subtracting the discount amount:\"), mdx(\"table\", null, mdx(\"thead\", {\n    parentName: \"table\"\n  }, mdx(\"tr\", {\n    parentName: \"thead\"\n  }, mdx(\"th\", _extends({\n    parentName: \"tr\"\n  }, {\n    \"align\": null\n  }), \"Shopping Amount\"), mdx(\"th\", _extends({\n    parentName: \"tr\"\n  }, {\n    \"align\": null\n  }), \"Discount %\"))), mdx(\"tbody\", {\n    parentName: \"table\"\n  }, mdx(\"tr\", {\n    parentName: \"tbody\"\n  }, mdx(\"td\", _extends({\n    parentName: \"tr\"\n  }, {\n    \"align\": null\n  }), \"5000 and Above\"), mdx(\"td\", _extends({\n    parentName: \"tr\"\n  }, {\n    \"align\": null\n  }), \"25%\")), mdx(\"tr\", {\n    parentName: \"tbody\"\n  }, mdx(\"td\", _extends({\n    parentName: \"tr\"\n  }, {\n    \"align\": null\n  }), \"1000 - 4999\"), mdx(\"td\", _extends({\n    parentName: \"tr\"\n  }, {\n    \"align\": null\n  }), \"10%\")), mdx(\"tr\", {\n    parentName: \"tbody\"\n  }, mdx(\"td\", _extends({\n    parentName: \"tr\"\n  }, {\n    \"align\": null\n  }), \"Below\"), mdx(\"td\", _extends({\n    parentName: \"tr\"\n  }, {\n    \"align\": null\n  }), \"5%\")))), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {}), \"Step 1: Start \\nStep 2: Read shopping amount\\nStep 3: Check whether shopping amount is greater than or equal to 5000, if yes then goto step 3.1. Otherwise check whether amount is greater than or equal to 1000 and less than 4999,  If yes, goto step 3.2 otherwise goto 3.3\\n    Step 3.1: Calculate discount as \\n                discount = shopping amount * 0.25\\n    Step 3.2: Calculate discount as \\n                discount = shopping amount * 0.10\\n    Step 3.3: Calculate discount as \\n                discount = shopping amount * 0.05\\nStep 6: Calculate the final amount\\n        Final amount = shopping amount - discount\\nStep 7: Display the Final amount\\nStep 8: Stop\\n\")));\n}\n;\nMDXContent.isMDXComponent = true;","tableOfContents":{"items":[{"url":"#find-the-smallest-of-given-two-numbers","title":"Find the smallest of given two numbers"},{"url":"#check-whether-the-given-number-is-three-digit-number-or-not","title":"Check whether the given number is three digit number or not"},{"url":"#check-whether-the-given-year-is-leap-year-or-not","title":"Check whether the given year is Leap Year or not."},{"url":"#calculate-purchase-amount-to-be-paid-after-discount-consider-10--discount-for-the-sale-amount-above-1000","title":"Calculate purchase amount to be paid after discount. Consider 10 % discount for the Sale amount above 1000."},{"url":"#find-whether-the-given-number-is-positive-or-negative","title":"Find whether the given number is positive or negative"},{"url":"#find-the-given-number-is-odd-or-even","title":"Find the given number is odd or even"},{"url":"#identify-whether-the-given-number-is-smallest-among-three-numbers","title":"Identify whether the given number is smallest among three numbers"},{"url":"#read-total-shopping-amount-purchased-in-the-shop-and-then-apply-the-discount-as-per-the-following-discount-criteria-then-find-and-print-the-final-amount-that-has-to-be-paid-by-the-customer-after-subtracting-the-discount-amount","title":"Read total shopping amount purchased in the shop, and then apply the discount as per the following discount criteria, then find and print the final amount that has to be paid by the customer after subtracting the discount amount:"}]},"parent":{"relativePath":"Unit-I/2-building/2-Selection Example.mdx"},"frontmatter":{"metaTitle":"Building Blocks of Algorithm - Selection Examples","metaDescription":"Building Blocks of Algorithm - Selection Examples"}},"allMdx":{"edges":[{"node":{"fields":{"slug":"/","title":"Syllabus"}}},{"node":{"fields":{"slug":"/Unit-I","title":"Unit-I"}}},{"node":{"fields":{"slug":"/Unit-III","title":"Unit - III"}}},{"node":{"fields":{"slug":"/Unit-IV","title":"Unit - IV"}}},{"node":{"fields":{"slug":"/Unit-V","title":"Unit - V"}}},{"node":{"fields":{"slug":"/Unit-I/5-Flowchart","title":"Flowchart"}}},{"node":{"fields":{"slug":"/Unit-I/2-building","title":"Building Blocks of Algorithm"}}},{"node":{"fields":{"slug":"/Unit-I/1-algorithm","title":"Algorithms"}}},{"node":{"fields":{"slug":"/Unit-I/3-functions","title":"Functions"}}},{"node":{"fields":{"slug":"/Unit-I/4-pseudocode","title":"Pseudocode"}}},{"node":{"fields":{"slug":"/Unit-I/7-illustrativeproblems","title":"Illustrative Problems"}}},{"node":{"fields":{"slug":"/Unit-I/7-illustrativeproblems/guess","title":"Guess a number"}}},{"node":{"fields":{"slug":"/Unit-I/2-building/1-Sequence Examples","title":"Sequence Examples"}}},{"node":{"fields":{"slug":"/Unit-I/2-building/2-Selection Example","title":"Selection Examples"}}},{"node":{"fields":{"slug":"/Unit-I/6-aps","title":"Algorithmic Problem Solving"}}},{"node":{"fields":{"slug":"/Unit-I/2-building/3-Iteration Example","title":"Iteration Examples"}}},{"node":{"fields":{"slug":"/Unit-I/3-functions/1-function examples","title":"Function Examples"}}},{"node":{"fields":{"slug":"/Unit-I/4-pseudocode/examples","title":"Pseudocode examples"}}},{"node":{"fields":{"slug":"/Unit-II","title":"Unit - II"}}},{"node":{"fields":{"slug":"/Unit-II/1-Introduction","title":"Introduction to Python"}}},{"node":{"fields":{"slug":"/Unit-II/4-values and types","title":"Values and Types"}}},{"node":{"fields":{"slug":"/Unit-II/5-variables","title":"Variables"}}},{"node":{"fields":{"slug":"/Unit-II/2-Installation","title":"Installation"}}},{"node":{"fields":{"slug":"/Unit-II/3-pythoninterpreter","title":"Interpreter"}}},{"node":{"fields":{"slug":"/Unit-II/6-Expression","title":"Expressions"}}},{"node":{"fields":{"slug":"/Unit-II/7-statement","title":"Statements"}}},{"node":{"fields":{"slug":"/Unit-II/8-operators/1-Arithmetic","title":"Arithmetic Operator"}}},{"node":{"fields":{"slug":"/Unit-II/8-operators","title":"Operators"}}},{"node":{"fields":{"slug":"/Unit-II/8-operators/2-Comparison","title":"Comparison Operator"}}},{"node":{"fields":{"slug":"/Unit-II/8-operators/3-Logical","title":"Logical Operator"}}},{"node":{"fields":{"slug":"/Unit-II/8-operators/4-Bitwise","title":"Bitwise Operator"}}},{"node":{"fields":{"slug":"/Unit-II/8-operators/5-Assignment","title":"Assignment Operator"}}},{"node":{"fields":{"slug":"/Unit-II/8-operators/6-Membership","title":"Memebership Operator"}}},{"node":{"fields":{"slug":"/Unit-II/8-operators/7-identity","title":"Identity Operator"}}},{"node":{"fields":{"slug":"/Unit-II/9-precedence of operators","title":"Precedence of Operator"}}},{"node":{"fields":{"slug":"/Unit-II/Illustrative programs","title":"Python Programs"}}},{"node":{"fields":{"slug":"/Unit-II/comments","title":"Comments"}}}]}},"pageContext":{"isCreatedByStatefulCreatePages":false,"id":"6b046a4f-775d-55c1-b98b-b66541a008fc"}}}